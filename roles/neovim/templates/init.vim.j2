let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

lua << END
local Plug = vim.fn['plug#']
vim.call('plug#begin', '~/.local/share/nvim/plugged')
Plug('dense-analysis/ale')
Plug('nvim-lualine/lualine.nvim')
Plug('shaunsingh/nord.nvim')
Plug('francoiscabrol/ranger.vim')
Plug('rbgrouleff/bclose.vim')
Plug('soywod/himalaya', {['rtp'] = 'vim'})
Plug('terrortylor/nvim-comment')
vim.call('plug#end')


vim.g.mapleader = " "
vim.g.nord_contrast = false
vim.g.nord_borders = true
vim.g.nord_disable_background = true
vim.g.nord_italic = false
vim.g.nord_uniform_diff_background = true
require('nord').set()

require('nvim_comment').setup {
  marker_padding = true,
  comment_empty = true,
  comment_empty_trim_whitespace = true,
  create_mappings = true,
  line_mapping = "gcc",
  operator_mapping = "gc",
  comment_chunk_text_object = "ic",
  hook = nil
}

require('lualine').setup {
  options = {
    icons_enabled = false,
    theme = 'nord',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', {
        'diagnostics', 
        sources = {'ale'},
        sections = {'error', 'warn', 'info', 'hint'},
        diagnostics_color = {
          error = 'DiagnosticError',
          warn  = 'DiagnosticWarn',
          info  = 'DiagnosticInfo',
          hint  = 'DiagnosticHint',
        },
        symbols = { error = 'E', warn  = 'W', info  = 'I', hint  = 'H'
        },
        colored = true,
        update_in_insert = false,
        always_visible = false,
      },
    },
    lualine_c = {'filename'},
    lualine_x = {
      'encoding',
      'fileformat',
      'filetype'
    },
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {
    lualine_b = {'buffers'}
  },
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}

function map(mode, shortcut, command)
  vim.api.nvim_set_keymap(mode, shortcut, command, { noremap = true, silent = true })
end

function nmap(shortcut, command)
  map('n', shortcut, command)
end

function tmap(shortcut, command)
  map('t', shortcut, command)
end

function vmap(shortcut, command)
  map('v', shortcut, command)
end

vim.opt.timeoutlen  = 500
vim.opt.tabstop = 2
vim.opt.softtabstop = 2
vim.opt.shiftwidth = 2
vim.opt.encoding = 'utf-8'
vim.opt.textwidth = 100
vim.opt.scrolloff = 10
vim.opt.clipboard:append('unnamedplus')
vim.opt.guicursor= ''
vim.opt.laststatus = 2
vim.opt.cmdheight = 1
vim.opt.selection = 'exclusive'
vim.opt.backspace = {'eol', 'start', 'indent'}
vim.opt.expandtab = true
vim.opt.smarttab = true
vim.opt.shiftround = true
vim.opt.autoindent = true
vim.opt.smartindent = true
vim.opt.cindent = true
vim.opt.backup = false
vim.opt.writebackup = false
vim.opt.swapfile = false
vim.opt.incsearch = true
vim.opt.hlsearch = true
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.wrap = true
vim.opt.linebreak = true
vim.opt.number = true
vim.opt.showmode = false 
vim.opt.autochdir = true
vim.opt.wildmenu = true
vim.opt.showmatch = true
vim.opt.hidden = true
vim.opt.ruler = true
vim.opt.magic = true
vim.opt.errorbells = false
vim.opt.visualbell = false
vim.opt.splitbelow = true
vim.opt.splitright = true
vim.opt.autoread = true
vim.opt.cursorline = true

nmap('<C-h>', ':split<CR>')
nmap('<C-l>', ':vsplit<CR>')
nmap('<C-q>', ':close!<CR>')
nmap('<C-j>', '<C-w>W')
nmap('<C-k>', '<C-w>w')
nmap('<C-x>', '<C-w>x')
nmap('<leader><CR>', ':nohlsearch<CR>')
nmap('<ESC>', ':nohlsearch<CR>')
nmap('<leader>bj', ':bnext<CR>')
nmap('<leader>bk', ':bprevious<CR>')
nmap('<leader>be', ':edit<SPACE>')
nmap('<leader>bd', ':bdelete!<CR>')
nmap('<leader>bw', ':write!<CR>')
nmap('<C-down>', ':resize -1<CR>')
nmap('<C-up>', ':resize +1<CR>')
nmap('<C-left>', ':vertical resize -1<CR>')
nmap('<C-right>', ':vertical resize +1<CR>')
nmap('<C-t>', ':call Term_toggle()<CR>')

-- tmap('<C-j>', '<C-\\><C-n><CR><C-w>W')
-- tmap('<C-k>', '<C-\\><C-n><CR><C-w>w')
-- tmap('<C-x>', '<C-\\><C-n><CR><C-w>x')
tmap('<ESC>', '<C-\\><C-n><CR>')

vim.opt.whichwrap:append('h')
vim.opt.whichwrap:append('l')

nmap('<leader>pp',':setlocal paste!<CR>')
nmap('<leader>ss',':setlocal spell!<CR>')
nmap('<leader>cd',':cd %:p:h<CR>:pwd<CR>')


-- return to last edit positions
vim.cmd([[au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif]])

-- handle non-Vim files
vim.cmd([[au BufRead *.pdf,*.jpg,*.png,*.gif sil exe "!xdg-open " . shellescape(expand("%:p")) | bd | let &ft=&ft | redraw!]])

-- detect external file changes test
vim.cmd([[au FocusGained,BufEnter * checktime]])

-- no line numbers in Terminal
vim.cmd[[au TermOpen * setlocal nonumber norelativenumber]]

-- insert mode in Terminal
vim.cmd[[au BufEnter * if &buftype == 'terminal' | :startinsert! | endif]]

END


" highlight clear CursorLine
" highlight CursorLineNR ctermfg=green



" let g:term_buf = 0
"     function! Term_toggle()
"         1wincmd l
"         if g:term_buf == bufnr("")
"             setlocal bufhidden=hide
"             close
"         else
"             bot vsplit new
"             " 12winc -
"             " exec "resize " . 15 
"             exec "vertical resize " . 75 
"             try
"                 exec "buffer ".g:term_buf
"             catch
"                 call termopen("bash", {"detach": 0})
"                 let g:term_buf = bufnr("")
"             endtry
"             startinsert!
"         endif
"     endfunction

